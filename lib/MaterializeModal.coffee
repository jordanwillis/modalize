DEBUG = false


class MaterializeModalClass
  defaults:
    title: 'Message'
    message: ''
    type: 'message'
    closeLabel: null
    submitLabel: 'ok'
    inputSelector: '#prompt-input'
    callback: null


  constructor: ->
    #
    # templateOptions:  Setting this reactive var will automatically
    #                   cause materializeModalContainer to re-render.
    #                   It starts with a default value of no modal content.
    @templateOptions = new ReactiveVar()
    #
    # $modal:           This is a jQuery handle on the #materializeModal
    #                   DOM node itself.  This is the object we call
    #                   .openModal() and .closeModal() on.
    #
    @$modal = null


  #
  # injectContainer:  This method makes sure there is one copy
  #                   of materializeModalContainer in the body
  #                   to hold the modal content.
  #                   Notice we do not create duplicates.
  #
  injectContainer: ->
    @modalContainer = Blaze.renderWithData(Template.materializeModalContainer, @templateOptions, document.body) if not @modalContainer?


  #
  # open(options):  Display a modal with the options specified by
  #                 the options argument.
  #                 These will usually be generated by the methods
  #                 below.
  #
  open: (options) ->
    console.log("MaterializeModal.open()", @) if DEBUG
    #
    # (1) Make sure there's a modal container.
    #
    @injectContainer()
    #
    # (2) Update the this.options ReactiveVar, which will
    #     cause the dynamic Template inside materializeModalContainer
    #     to re-render.
    #
    @templateOptions.set options


  #
  # close( submit, context ): Close the modal.
  #                           Do not destroy materializeModalContainer.
  #                           - submit is a bool that determines whether
  #                             doSubmitCallback or doCancelCallback is called.
  #                           - context is the data that might be relevant to
  #                             the submitCallback, such as the submitted form.
  #
  close: (submit=false, context=null) ->
    console.log "MaterializeModal.close()" if DEBUG
    if @templateOptions.get()? # if there are no options, there is no modal -- there is nothing to close!
      #
      # If the user willingly submitted the modal,
      # run doSubmitCallback with context.
      #
      if submit
        cbSuccess = @doSubmitCallback(context)
      else
        cbSuccess = @doCancelCallback()
      #
      # If the callback had no errors, close the modal.
      #
      if cbSuccess
        @$modal.closeModal
          complete: =>
            @templateOptions.set null


  #
  # MaterializeModal common modal types:
  #
  #
  display: (options = {}) ->
    _.defaults options,
      message: null
      title: null
      submitLabel: null
      closeLabel: 'cancel'
    , @defaults
    @open options

  loading: (options = {}) ->
    _.defaults options,
      message: 'Loading'
      title: null
      bodyTemplate: 'materializeModalLoading'
      submitLabel: 'cancel'
    , @defaults
    @open options

  progress: (options = {}) ->
    if not options.progress?
      Materialize.toast "Error: No progress value specified!", 3000, "red"
    else
      options.progress = parseInt(100 * options.progress).toString() + "%" # prettify progress value!
      _.defaults options,
        message: null
        title: null
        bodyTemplate: 'materializeModalProgress'
        submitLabel: 'close'
      , @defaults
      @open options


  form: (options = {}) ->
    console.log("form options", options) if DEBUG
    if not options.bodyTemplate?
      Materialize.toast("Error: No bodyTemplate specified!", 3000, "red")
    else
      _.defaults options,
        type: 'form'
        title: "Edit Record"
        submitLabel: '<i class="material-icons left">save</i>save'
        closeLabel: '<i class="material-icons left">&#xE033;</i>cancel'
      , @defaults

      if options.smallForm
        options.size = 'modal-sm'
        options.btnSize = 'btn-sm'
      @open options


  addValueToObjFromDotString: (obj, dotString, value) ->
    path = dotString.split(".")
    tmp = obj
    lastPart = path.pop()
    for part in path
      # loop through each part of the path adding to obj
      if not tmp[part]?
        tmp[part] = {}
      tmp = tmp[part]
    if lastPart?
      tmp[lastPart] = value


  #
  # fromForm: Given the jQuery handle to a form element,
  #           parse the inputs to create a dictionary
  #           representing the current value of each input.
  #           Note that only form inputs with a unique name
  #           attribute will be parsed.
  #
  fromForm: (form) ->
    console.log("fromForm", form, form?.serializeArray()) if DEBUG
    result = {}
    for key in form?.serializeArray()
      @addValueToObjFromDotString(result, key.name, key.value)

    # Override the result with the boolean values of checkboxes, if any
    for check in form?.find "input:checkbox"
      if $(check).prop('name')
        result[$(check).prop('name')] = $(check).prop 'checked'
    console.log("fromForm result", result) if DEBUG
    result


  #
  # doCancelCallback:   This only gets called if the user closes the
  #                     modal without submitting or confirming.
  #                     It will return submit: false to the callback, if there
  #                     is one.
  #
  doCancelCallback: ->
    options = @templateOptions.get()
    return true unless options.callback?

    try
      console.log("materializeModal: doCancelCallback") if DEBUG
      response =
        submit: false
      options.callback(null, response)
    catch error
      options.callback(error, null)
    true


  # doSubmitCallback:   This only gets called if the user sapiently submits
  #                     the modal -- clicking submit, hitting enter, etc.
  #                     It will parse any prompt or form data, if applicable.
  #                     It will return submit: true to the callback, if there
  #                     is one.
  #
  doSubmitCallback: (context) ->
    options = @templateOptions.get()
    return true unless options.callback?

    try
      response =
        submit: true

      switch options.type
        when 'prompt'
          response.value = $(options.inputSelector).val()
        when 'form'
          if context.form?
            response.form = @fromForm(context.form)
            response.value = response.form

      try
        options.callback(null, response)
      catch error
        console.error("MaterializeModal Callback returned Error", error)
        Materialize.toast(error.reason, 3000, 'toast-error')
        return false

    catch error
      options.callback(error, null)
    true

#
# Create modal object under Materialize namespace.
#
Materialize.modalize = new MaterializeModalClass()
