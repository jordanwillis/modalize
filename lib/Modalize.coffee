DEBUG = false


class Modalize
  defaults:
    title: 'Modal Template'
    dismiss: true

  constructor: ->
    #
    # templateOptions:  Setting this reactive var will automatically
    #                   cause materializeModalContainer to re-render.
    #                   It starts with a default value of no modal content.
    @templateOptions = new ReactiveVar()
    #
    # $modal:           This is a jQuery handle on the #materializeModal
    #                   DOM node itself.  This is the object we call
    #                   .openModal() and .closeModal() on.
    #
    @$modal = null
    #
    # $dispatcher:      This is a jQuery handle on the #materializeModal
    #                   DOM node itself.  This is the object we call
    #                   .openModal() and .closeModal() on.
    #
    @$dispatcher = null


  #
  # injectContainer:  This method makes sure there is one copy
  #                   of materializeModalContainer in the body
  #                   to hold the modal content.
  #                   Notice we do not create duplicates.
  #
  injectContainer: ->
    @modalContainer = Blaze.renderWithData(Template.materializeModalContainer, @templateOptions, document.body) if not @modalContainer?


  #
  # open(options):  Display a modal with the options specified by
  #                 the options argument.
  #                 These will usually be generated by the methods
  #                 below.
  #
  open: (options) ->
    console.log("MaterializeModal.open()", @) if DEBUG
    #
    # (1) Make sure there's a modal container.
    #
    @injectContainer()
    #
    # (2) Update the this.options ReactiveVar, which will
    #     cause the dynamic Template inside materializeModalContainer
    #     to re-render.
    #
    @templateOptions.set options


  #
  # close: Close the modal.
  #        Do not destroy materializeModalContainer.
  #
  close: ->
    console.log "MaterializeModal.close()" if DEBUG
    if @templateOptions.get()? # if there are no options, there is no modal -- there is nothing to close!
      @$modal.closeModal
        complete: =>
          @templateOptions.set null
          @$dispatcher = null
          @$modal = null

  display: (options = {}) ->
    _.defaults options,
      @defaults
    @open options

#
# Create modal object under Materialize namespace.
#
Materialize.modalize = new Modalize()
